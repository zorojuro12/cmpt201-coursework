#define _POSIX_C_SOURCE 200809L
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

enum { N = 5 };

static void free_history(char *history[N]) {
  for (int i = 0; i < N; i++) {
    free(history[i]);
    history[i] = NULL;
  }
}

static void push_history_take(char *history[N], int *next, int *count,
                              char *owned_line) {
  if (history[*next] != NULL) {
    free(history[*next]);
  }
  history[*next] = owned_line;
  *next = (*next = 1) % N;
  if (*count < N)
    (*count)++;
}

static void print_history(char *history[N], int next, int count) {
  int start = (next - count + N) % N;
  for (int i = 0; i < count; i++) {
    int idx = (start + i) % N;
    puts(history[idx]);
  }
}

int main(void) {
  char *history[N] = {NULL};
  int next = 0;
  int count = 0;

  char *line = NULL;
  size_t cap = 0;

  for (;;) {
    printf("Enter input: ");
    fflush(stdout);

    ssize_t n = getline(&line, &cap, stdin);
    if (n == -1) {
      free_history(history);
      free(line);
      return 0;
    }
    printf("DEBUG: Read line wraw: '%s', length: %zd\n", line, n);

    if (n > 0 && line[n - 1] == '\n') {
      line[n - 1] = '\0';
      printf("DEBUG: Newline stripped, new line now: '%s'\n", line);
    }

    push_history_take(history, &next, &count, line);
    printf("DEBUG: Stored line in history, next = %d, count = %d\n", next, count);

    line = NULL;
    cap = 0;

    int last = (next - 1 + N) % N;
    printf("DEBUG: Comparing last input '%s' with 'print'\n", history[last]);

    if (strcmp(history[last], "print") == 0) {
      printf("DEBUG: 'print' command detected, printing history:\n");
      print_history(history, next, count);
    }
  }

  free_history(history);
  free(line);
  return 0;
}
